name: UI Build & Test (Feature branch)

on:
  push:
    branches-ignore:
      - main
      - development
  pull_request:
    branches: [ "development" ]
  workflow_dispatch:
    inputs:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      # Up the build version
      - uses: paulhatch/semantic-version@v5.0.3
        name: Determine Build Version
        id: version
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}-prerelease"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          #change_path: "src/my-service"
          # Named version, will be used as suffix for name version tag
          namespace: ui
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "csv"

      # Create version source file using version just generated
      - name: Create version file
        id: makever
        run: |
          echo "BUILDING VERSION ${{ steps.version.outputs.version }}"
          echo "{\"version\": \"${{ steps.version.outputs.version }}\" }" > ./client/src/version.json
          cat ./client/src/version.json
          echo "semverslug=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      # Not sure what this does but it was in the old build...
      - uses: gacts/github-slug@v1
        id: slug
        with:
          # replace value in "to-slug" this on your choice
          to-slug: ${{ steps.makever.outputs.semverslug }}

      # Install dependencies and generate version file
      - name: NPM dependencies & version
        run: |
          cd client
          npm ci
          npm version ${{ steps.version.outputs.version }}
          npm run postinstall ${{ steps.version.outputs.version }}

      # Protobuf code generation using our build docker container (this is pretty slow, should replace with just an npm package for protobuf??)
      - name: Generate protobuf code
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/pixlise/build-container:golang-1.18-protoc-3.7.1-protobuf-3.11.4-angular-13.1.2-nodejs-16
          options: -v ${{ github.workspace }}:/work
          run: |
            cd /work
            ./genproto.sh

      # Run Angular UI unit tests
      - name: Run UI Tests
        uses: addnab/docker-run-action@v3
        with:
          image: atlassianlabs/docker-node-jdk-chrome-firefox:node-16-npm-8
          options: -v ${{ github.workspace }}:/work
          run: |
            cd /work/client
            npm i -g @angular/cli@13.1.2
            ng test --watch=false --browsers ChromeHeadless
            # This was failing, don't use it locally either, so turned off for now
            #npm run lint

      # Run the Angular build
      - name: Build UI
        run: |
          cd client
          npm i -g @angular/cli@13.1.2
          ng build --configuration production

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=${{ steps.version.outputs.version}}-${{ steps.slug.outputs.slug }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}

  test-lua:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: addnab/docker-run-action@v3
        with:
          image: nickblah/lua:5.4
          options: -v ${{ github.workspace }}:/work
          run: |
            cd /work/client/src/app/expression-language/lua/test
            ./test.sh
