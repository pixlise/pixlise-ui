name: Test and Build Pixlise UI

on:
  workflow_call:
    inputs:
      version_format:
        description: "Version format string used for paulhatch/semantic-version"
        required: true
        default: "${major}.${minor}.${patch}"
        type: string

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
      github_sha_short: ${GITHUB_SHA_SHORT}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: GitHub Slug Action
        uses: rlespinasse/github-slug-action@v4.4.0
      - name: version
        uses: paulhatch/semantic-version@v5.0.3
        id: version
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          version_format: "${{ inputs.version_format }}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          #change_path: "src/my-service"
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "csv"

  ui-test:
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      # Checkout the repo
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      # Create version source file using version just generated
      - name: Create version file
        id: makever
        run: |
          echo "BUILDING VERSION ${{ needs.version.outputs.version }}"
          echo "{\"version\": \"${{ needs.version.outputs.version }}\" }" > ./client/src/version.json
          cat ./client/src/version.json

      # Install dependencies and generate version file
      - name: NPM dependencies & version
        run: |
          cd client
          npm ci
          npm version ${{ needs.version.outputs.version }}
          npm run postinstall ${{ needs.version.outputs.version }}
      # Protobuf code generation using our build docker container (this is pretty slow, should replace with just an npm package for protobuf??)
      - name: Generate protobuf code
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/pixlise/build-container:golang-1.21-protoc-24.3-protobuf-3.19.3-angular-16.1.0-nodejs-18
          options: -v ${{ github.workspace }}:/work
          run: |
            cd /work
            ./genproto.sh

      # Run Angular UI unit tests
      - name: Run UI Tests
        uses: addnab/docker-run-action@v3
        with:
          image: atlassianlabs/docker-node-jdk-chrome-firefox:2023-05-22
          options: -v ${{ github.workspace }}:/work
          run: |
            cd /work/client
            npm i -g @angular/cli@16.1
            export TERM=xterm
            cp ./node_modules/pixlise-wasmoon/dist/glue.wasm ./src/app/expression-language/lua
            ng test --no-watch --no-progress --browsers=ChromeHeadless
            # npm test --watch=false --browsers ChromeHeadless
            # This was failing, don't use it locally either, so turned off for now
            #npm run lint

  ui-build:
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      # Checkout the repo
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      # Create version source file using version just generated
      - name: Create version file
        id: makever
        run: |
          echo "BUILDING VERSION ${{ needs.version.outputs.version }}"
          echo "{\"version\": \"${{ needs.version.outputs.version }}\" }" > ./client/src/version.json
          cat ./client/src/version.json

      # Install dependencies and generate version file
      - name: NPM dependencies & version
        run: |
          cd client
          npm ci
          npm version ${{ needs.version.outputs.version }}
          npm run postinstall ${{ needs.version.outputs.version }}

      # Run the Angular build
      - name: Build UI
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/pixlise/build-container:golang-1.21-protoc-24.3-protobuf-3.19.3-angular-16.1.0-nodejs-18
          options: -v ${{ github.workspace }}:/work
          run: |
            cd /work
            ./genproto.sh
            cd client
            npm i -g @angular/cli@16.1
            npm build

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=${{ needs.version.outputs.version}}

      # Build and push Docker image (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.version.outputs.version }}

  # lua-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Checkout the repo
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         submodules: recursive
  #     - uses: addnab/docker-run-action@v3
  #       with:
  #         image: nickblah/lua:5.4
  #         options: -v ${{ github.workspace }}:/work
  #         run: |
  #           set -e
  #           cd /work/client/src/app/expression-language/lua/test
  #           ./test.sh
