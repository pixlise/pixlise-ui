// Copyright (c) 2018-2022 California Institute of Technology (“Caltech”). U.S.
// Government sponsorship acknowledged.
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
// * Neither the name of Caltech nor its operating division, the Jet Propulsion
//   Laboratory, nor the names of its contributors may be used to endorse or
//   promote products derived from this software without specific prior written
//   permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

import { db_data, db_index, db_numberCoherent, db_numberPhoto, maxZ } from "./xray-xsect-data";

class EscapeLine {
  constructor(
    public energy: number,
    public fraction: number
  ) {}
}

class XrayXsectTable {
  energiesCoh: number[] = [];
  sigmaCoh: number[] = [];
  splineCoh: number[] = [];
  sigmaIncoh: number[] = [];
  splineIncoh: number[] = [];

  energiesPhoto: number[] = [];
  sigmaPhoto: number[] = [];
  splinePhoto: number[] = [];

  constructor(public atomicNumber: number) {
    if (atomicNumber < 1 || atomicNumber > maxZ) {
      throw Error("atomicNumber: " + atomicNumber + " not found in xray xsect db");
    }

    let db_pointer = db_index[atomicNumber];
    //            get number of entries for coherent and incoherent tables and resize vectors
    let numberCoherent = db_numberCoherent[atomicNumber];

    // read data into arrays
    for (let i = 0; i < numberCoherent; i++) {
      let thisPointer = db_pointer + i * 5;
      this.energiesCoh.push(db_data[thisPointer /*+0*/]);

      this.sigmaCoh.push(db_data[thisPointer + 1]);
      this.splineCoh.push(db_data[thisPointer + 2]);
      this.sigmaIncoh.push(db_data[thisPointer + 3]);
      this.splineIncoh.push(db_data[thisPointer + 4]);
    }

    // get number of entries for photoabsorption table and resize vectors
    let numberPhoto = db_numberPhoto[atomicNumber];

    db_pointer = db_index[atomicNumber] + 5 * numberCoherent;

    // read data into vectors
    for (let i = 0; i < numberPhoto; i++) {
      let thisPointer = db_pointer + i * 3;

      this.energiesPhoto.push(db_data[thisPointer /*+0*/]);
      this.sigmaPhoto.push(db_data[thisPointer + 1]);
      this.splinePhoto.push(db_data[thisPointer + 2]);
    }
  }

  total(energy: number): number {
    return this.cohCalc(energy) + this.incohCalc(energy) + this.photoCalc(energy);
  }

  private cohCalc(energy: number): number {
    return energy > 0.0 ? Math.exp(splint(this.energiesCoh, this.sigmaCoh, this.splineCoh, Math.log(energy))) : 0.0;
  }

  private incohCalc(energy: number): number {
    return energy > 0.0 ? Math.exp(splint(this.energiesCoh, this.sigmaIncoh, this.splineIncoh, Math.log(energy))) : 0.0;
  }

  private photoCalc(energy: number): number {
    if (energy <= 0.0) {
      return 0.0;
    }

    let logEnergy = Math.log(energy);
    let i = nofx(this.energiesPhoto, logEnergy);

    // if the requested energy exactly matches an edge discontintuity pair,
    // return the cross section value below the edge
    if (Math.log(energy) != this.energiesPhoto[i]) {
      return Math.exp(splint(this.energiesPhoto, this.sigmaPhoto, this.splinePhoto, logEnergy));
    } else {
      let pair = false;
      if (i > 0 && this.energiesPhoto[i] == this.energiesPhoto[i - 1]) {
        pair = true;
      }

      if (i < this.energiesPhoto.length - 1 && this.energiesPhoto[i] == this.energiesPhoto[i + 1]) {
        pair = true;
      }

      let value = 0;
      if (pair) {
        value = Math.exp(splint(this.energiesPhoto, this.sigmaPhoto, this.splinePhoto, logEnergy - 1.0e-6));
      } else {
        value = Math.exp(splint(this.energiesPhoto, this.sigmaPhoto, this.splinePhoto, logEnergy));
      }

      if (isNaN(value)) {
        return 0;
      }

      return value;
    }
  }
}

function spline(x: number[], y: number[], yp1: number, ypn: number): number[] {
  // calculates vector y2 for spline interpolation of data in x and y vectors
  let n = x.length;
  let y2: number[] = new Array(n).fill(0.0);

  let i: number;
  let k: number;
  let p: number;
  let qn: number;
  let sig: number;
  let un: number;

  let u: number[] = new Array(n).fill(0.0);

  if (yp1 > 0.99e30) {
    y2[0] = u[0] = 0.0;
  } else {
    y2[0] = -0.5;
    u[0] = (3.0 / (x[1] - x[0])) * ((y[1] - y[0]) / (x[1] - x[0]) - yp1);
  }

  for (i = 1; i <= n - 2; i++) {
    if (x[i] - x[i - 1] <= 0.0 || x[i] - x[i - 1] <= 0.0) {
      throw Error("Spline: x not monotonicly increasing");
    }

    sig = (x[i] - x[i - 1]) / (x[i + 1] - x[i - 1]);
    p = sig * y2[i - 1] + 2.0;
    y2[i] = (sig - 1.0) / p;
    u[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]) - (y[i] - y[i - 1]) / (x[i] - x[i - 1]);
    u[i] = ((6.0 * u[i]) / (x[i + 1] - x[i - 1]) - sig * u[i - 1]) / p;
  }

  if (ypn > 0.99e30) {
    qn = un = 0.0;
  } else {
    qn = 0.5;
    un = (3.0 / (x[n - 1] - x[n - 2])) * (ypn - (y[n - 1] - y[n - 2]) / (x[n - 1] - x[n - 2]));
  }

  y2[n - 1] = (un - qn * u[n - 2]) / (qn * y2[n - 2] + 1.0);
  for (k = n - 2; k >= 0; k--) {
    y2[k] = y2[k] * y2[k + 1] + u[k];
  }
  return y2;
}

function splint(xa: number[], ya: number[], y2a: number[], x: number): number {
  let n = xa.length;
  if (n <= 0) {
    return 0;
  }
  if (n == 1) {
    return ya[0];
  }

  let klo: number;
  let khi: number;
  let k: number;
  let h: number;
  let b: number;
  let a: number;

  klo = 0;
  khi = n - 1;
  while (khi - klo > 1) {
    k = (khi + klo) >> 1;
    if (xa[k] > x) {
      khi = k;
    } else {
      klo = k;
    }
  }

  h = xa[khi] - xa[klo];
  if (h == 0.0) {
    throw Error("Splint: Zero input interval");
  }

  a = (xa[khi] - x) / h;
  b = (x - xa[klo]) / h;

  return a * ya[klo] + b * ya[khi] + (((a * a * a - a) * y2a[klo] + (b * b * b - b) * y2a[khi]) * (h * h)) / 6.0;
}

function nofx(array: number[], x: number): number {
  // binary search routine modified from spline routine in "Numberical Recipes in C".
  let n = array.length;
  if (n <= 0) {
    return 0;
  }

  let k: number;
  let klo: number = 0;
  let khi: number = n - 1;

  // handle case where array increases from last to first
  if (array[klo] > array[khi]) {
    klo = n - 1;
    khi = 0;
  }

  while (Math.abs(khi - klo) > 1) {
    k = (khi + klo) >> 1;
    if (array[k] > x) {
      khi = k;
    } else {
      klo = k;
    }
  }

  if (x - array[klo] > array[khi] - x) {
    return khi;
  }

  return klo;
}

export class XrayMaterial {
  fractions: number[] = [];
  absorption_tables: XrayXsectTable[] = [];

  constructor(public atomicNumbers: number[]) {
    if (atomicNumbers.length != 1) {
      throw Error("Expected 1 element for XrayMaterial");
    }

    this.fractions = [1];
    for (let atomicNum of this.atomicNumbers) {
      this.absorption_tables.push(new XrayXsectTable(atomicNum));
    }
  }

  cross_section(energy: number): number {
    // Calculate X-ray absorption cross-section at a given energy (cm2/gm)
    if (energy <= 0) {
      return 0;
    }

    let sigma = 0;
    let sum = 0;

    for (let frac of this.fractions) {
      sum += frac;
    }

    for (let c = 0; c < this.atomicNumbers.length; c++) {
      sigma += this.fractions[c] * this.absorption_tables[c].total(energy);
    }

    if (sum == 0) {
      return 0;
    }

    return sigma / sum;
  }

  fraction(atomicNumber: number): number {
    // Find index of element to read fraction value
    let idx = this.find_element(atomicNumber);
    if (idx < 0) {
      return 0;
    }
    return this.fractions[idx];
  }

  private find_element(atomicNumber: number): number {
    for (let c = 0; c < this.atomicNumbers.length; c++) {
      if (atomicNumber == this.atomicNumbers[c]) {
        return c;
      }
    }
    return -1;
  }
}

class XrayEdge {
  private edgeIndex: number;
  private MAXINDEX = 27;
  private EDGE_ENERGIES: number[] = [
    // NOTE: This table comes from PIQUANT XrayEdge.cpp

    //    K       L1       L2       L3       M1       M2       M3       M4       M5       N1       N2       N3       N4       N5
    //    N6       N7       O1       O2       O3       O4       O5       O6       O7       P1       P2       P3       P4       Q1

    //    K,      L-I,    L-II,   L-III,  M-I,    M-II,   M-III,  M-IV,   M-V,    N-I,    N-II,   N-III,  N-IV,   N-V,    N-VI,   N-VII,  O-I,    O-II,   O-III,  O-IV,   O-V,    O6,     O7,     P-I,    P-II,   P-III,  P4,     Q1,     ,       ,       Element
    //    1s,     2s,     2p1/2,  2p3/2,  3s,     3p1/2,  3p3/2,  3d3/2,  3d5/2,  4s,     4p1/2,  4p3/2,  4d3/2,  4d5/2,  4f5/2,  4f7/2,  5s,     5p1/2,  5p3/2,  5d3/2,  5d5/2,  ,       ,       6s,     6p1/2,  6p3/2,  ,       ,       ,       ,
    13.6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     1,      H
    24.6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     2,      He
    54.7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     3,      Li
    111.5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     4,      Be
    188,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     5,      B
    284.2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     6,      C
    409.9,
    37.3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     7,      N
    543.1,
    41.6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     8,      O
    696.7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     9,      F
    870.2,
    48.5,
    21.7,
    21.6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     10,     Ne
    1070.8,
    63.5,
    30.65,
    30.81,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     11,     Na
    1303,
    88.7,
    49.78,
    49.5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     12,     Mg
    1559.6,
    117.8,
    72.95,
    72.55,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     13,     Al
    1839,
    149.7,
    99.82,
    99.42,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     14,     Si
    2145.5,
    189,
    136,
    135,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     15,     P
    2472,
    230.9,
    163.6,
    162.5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     16,     S
    2822.4,
    270,
    202,
    200,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     17,     Cl
    3205.9,
    326.3,
    250.6,
    248.4,
    29.3,
    15.9,
    15.7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     18,     Ar
    3608.4,
    378.6,
    297.3,
    294.6,
    34.8,
    18.3,
    18.3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     19,     K
    4038.5,
    438.4,
    349.7,
    346.2,
    44.3,
    25.4,
    25.4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     20,     Ca
    4492,
    498,
    403.6,
    398.7,
    51.1,
    28.3,
    28.3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     21,     Sc
    4966,
    560.9,
    460.2,
    453.8,
    58.7,
    32.6,
    32.6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     22,     Ti
    5465,
    626.7,
    519.8,
    512.1,
    66.3,
    37.2,
    37.2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     23,     V
    5989,
    696,
    583.8,
    574.1,
    74.1,
    42.2,
    42.2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     24,     Cr
    6539,
    769.1,
    649.9,
    638.7,
    82.3,
    47.2,
    47.2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     25,     Mn
    7112,
    844.6,
    719.9,
    706.8,
    91.3,
    52.7,
    52.7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     26,     Fe
    7709,
    925.1,
    793.2,
    778.1,
    101,
    58.9,
    59.9,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     27,     Co
    8333,
    1008.6,
    870,
    852.7,
    110.8,
    68,
    66.2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     28,     Ni
    8979,
    1096.7,
    952.3,
    932.7,
    122.5,
    77.3,
    75.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     29,     Cu
    9659,
    1196.2,
    1044.9,
    1021.8,
    139.8,
    91.4,
    88.6,
    10.2,
    10.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     30,     Zn
    10367,
    1299,
    1143.2,
    1116.4,
    159.5,
    103.5,
    100,
    18.7,
    18.7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     31,     Ga
    11103,
    1414.6,
    1248.1,
    1217,
    180.1,
    124.9,
    120.8,
    29.8,
    29.2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     32,     Ge
    11867,
    1527,
    1359.1,
    1323.6,
    204.7,
    146.2,
    141.2,
    41.7,
    41.7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     33,     As
    12658,
    1652,
    1474.3,
    1433.9,
    229.6,
    166.5,
    160.7,
    55.5,
    54.6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     34,     Se
    13474,
    1782,
    1596,
    1550,
    257,
    189,
    182,
    70,
    69,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     35,     Br
    14326,
    1921,
    1730.9,
    1678.4,
    292.8,
    222.2,
    214.4,
    95,
    93.8,
    27.5,
    14.1,
    14.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     36,     Kr
    15200,
    2065,
    1864,
    1804,
    326.7,
    248.7,
    239.1,
    113,
    112,
    30.5,
    16.3,
    15.3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     37,     Rb
    16105,
    2216,
    2007,
    1940,
    358.7,
    280.3,
    270,
    136,
    134.2,
    38.9,
    21.3,
    20.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     38,     Sr
    17038,
    2373,
    2156,
    2080,
    392,
    310.6,
    298.8,
    157.7,
    155.8,
    43.8,
    24.4,
    23.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     39,     Y
    17998,
    2532,
    2307,
    2223,
    430.3,
    343.5,
    329.8,
    181.1,
    178.8,
    50.6,
    28.5,
    27.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     40,     Zr
    18986,
    2698,
    2465,
    2371,
    466.6,
    376.1,
    360.6,
    205,
    202.3,
    56.4,
    32.6,
    30.8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     41,     Nb
    20000,
    2866,
    2625,
    2520,
    506.3,
    411.6,
    394,
    231.1,
    227.9,
    63.2,
    37.6,
    35.5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     42,     Mo
    21044,
    3043,
    2793,
    2677,
    544,
    447.6,
    417.7,
    257.6,
    253.9,
    69.5,
    42.3,
    39.9,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     43,     Tc
    22117,
    3224,
    2967,
    2838,
    586.1,
    483.5,
    461.4,
    284.2,
    280,
    75,
    46.3,
    43.2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     44,     Ru
    23220,
    3412,
    3146,
    3004,
    628.1,
    521.3,
    496.5,
    311.9,
    307.2,
    81.4,
    50.5,
    47.3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     45,     Rh
    24350,
    3604,
    3330,
    3173,
    671.6,
    559.9,
    532.3,
    340.5,
    335.2,
    87.1,
    55.7,
    50.9,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     46,     Pd
    25514,
    3806,
    3524,
    3351,
    719,
    603.8,
    573,
    374,
    368.3,
    97,
    63.7,
    58.3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     47,     Ag
    26711,
    4018,
    3727,
    3538,
    772,
    652.6,
    618.4,
    411.9,
    405.2,
    109.8,
    63.9,
    63.9,
    11.7,
    10.7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     48,     Cd
    27940,
    4238,
    3938,
    3730,
    827.2,
    703.2,
    665.3,
    451.4,
    443.9,
    122.9,
    73.5,
    73.5,
    17.7,
    16.9,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     49,     In
    29200,
    4465,
    4156,
    3929,
    884.7,
    756.5,
    714.6,
    493.2,
    484.9,
    137.1,
    83.6,
    83.6,
    24.9,
    23.9,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     50,     Sn
    30491,
    4698,
    4380,
    4132,
    946,
    812.7,
    766.4,
    537.5,
    528.2,
    153.2,
    95.6,
    95.6,
    33.3,
    32.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     51,     Sb
    31814,
    4939,
    4612,
    4341,
    1006,
    870.8,
    820,
    583.4,
    573,
    169.4,
    103.3,
    103.3,
    41.9,
    40.4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     52,     Te
    33169,
    5188,
    4852,
    4557,
    1072,
    931,
    875,
    630.8,
    619.3,
    186,
    123,
    123,
    50.6,
    48.9,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     53,     I
    34561,
    5453,
    5107,
    4786,
    1148.7,
    1002.1,
    940.6,
    689,
    676.4,
    213.2,
    146.7,
    145.5,
    69.5,
    67.5,
    0,
    0,
    23.3,
    13.4,
    12.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     54,     Xe
    35985,
    5714,
    5359,
    5012,
    1211,
    1071,
    1003,
    740.5,
    726.6,
    232.3,
    172.4,
    161.3,
    79.8,
    77.5,
    0,
    0,
    22.7,
    14.2,
    12.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     55,     Cs
    37441,
    5989,
    5624,
    5247,
    1293,
    1137,
    1063,
    795.7,
    780.5,
    253.5,
    192,
    178.6,
    92.6,
    89.9,
    0,
    0,
    30.3,
    17,
    14.8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     56,     Ba
    38925,
    6266,
    5891,
    5483,
    1362,
    1209,
    1128,
    853,
    836,
    274.7,
    205.8,
    196,
    105.3,
    102.5,
    0,
    0,
    34.3,
    19.3,
    16.8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     57,     La
    40443,
    6549,
    6164,
    5723,
    1436,
    1274,
    1187,
    902.4,
    883.8,
    291,
    223.2,
    206.5,
    109,
    109,
    0.1,
    0.1,
    37.8,
    19.8,
    17,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     58,     Ce
    41991,
    6835,
    6440,
    5964,
    1511,
    1337,
    1242,
    948.3,
    928.8,
    304.5,
    236.3,
    217.6,
    115.1,
    115.1,
    2,
    2,
    37.4,
    22.3,
    22.3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     59,     Pr
    43569,
    7126,
    6722,
    6208,
    1575,
    1403,
    1297,
    1003.3,
    980.4,
    319.2,
    243.3,
    224.6,
    120.5,
    120.5,
    1.5,
    1.5,
    37.5,
    21.1,
    21.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     60,     Nd
    45184,
    7428,
    7013,
    6459,
    1655,
    1471,
    1357,
    1052,
    1027,
    332.7,
    242,
    242,
    120,
    120,
    1.5,
    1.5,
    37.5,
    21.1,
    21.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     61,     Pm
    46834,
    7737,
    7312,
    6716,
    1723,
    1541,
    1420,
    1110.9,
    1083.4,
    347.2,
    265.6,
    247.4,
    129,
    129,
    5.2,
    5.2,
    37.4,
    21.3,
    21.3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     62,     Sm
    48519,
    8052,
    7617,
    6977,
    1800,
    1614,
    1481,
    1158.6,
    1127.5,
    360,
    284,
    257,
    133,
    127.7,
    0,
    0,
    32,
    22,
    22,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     63,     Eu
    50239,
    8376,
    7930,
    7243,
    1881,
    1688,
    1544,
    1221.9,
    1189.6,
    378.6,
    286,
    271,
    142.6,
    142.6,
    8.6,
    8.6,
    36,
    28,
    21,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     64,     Gd
    51996,
    8708,
    8252,
    7514,
    1968,
    1768,
    1611,
    1276.9,
    1241.1,
    396,
    322.4,
    284.1,
    150.5,
    150.5,
    7.7,
    2.4,
    45.6,
    28.7,
    22.6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     65,     Tb
    53789,
    9046,
    8581,
    7790,
    2047,
    1842,
    1676,
    1333,
    1292.6,
    414.2,
    333.5,
    293.2,
    153.6,
    153.6,
    8,
    4.3,
    49.9,
    26.3,
    26.3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     66,     Dy
    55618,
    9394,
    8918,
    8071,
    2128,
    1923,
    1741,
    1392,
    1351,
    432.4,
    343.5,
    308.2,
    160,
    160,
    8.6,
    5.2,
    49.3,
    30.8,
    24.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     67,     Ho
    57486,
    9751,
    9264,
    8358,
    2207,
    2006,
    1812,
    1453,
    1409,
    449.8,
    366.2,
    320.2,
    167.6,
    167.6,
    8,
    4.7,
    50.6,
    31.4,
    24.7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     68,     Er
    59390,
    10116,
    9617,
    8648,
    2307,
    2090,
    1885,
    1515,
    1468,
    470.9,
    385.9,
    332.6,
    175.5,
    175.5,
    8,
    4.6,
    54.7,
    31.8,
    25,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     69,     Tm
    61332,
    10486,
    9978,
    8944,
    2398,
    2173,
    1950,
    1576,
    1528,
    480.5,
    388.7,
    339.7,
    191.2,
    182.4,
    2.5,
    1.3,
    52,
    30.3,
    24.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     70,     Yb
    63314,
    10870,
    10349,
    9244,
    2491,
    2264,
    2024,
    1639,
    1589,
    506.8,
    412.4,
    359.2,
    206.1,
    196.3,
    8.9,
    7.5,
    57.3,
    33.6,
    26.7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     71,     Lu
    65351,
    11271,
    10739,
    9561,
    2601,
    2365,
    2108,
    1716,
    1662,
    538,
    438.2,
    380.7,
    220,
    211.5,
    15.9,
    14.2,
    64.2,
    38,
    29.9,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     72,     Hf
    67416,
    11682,
    11136,
    9881,
    2708,
    2469,
    2194,
    1793,
    1735,
    563.4,
    463.4,
    400.9,
    237.9,
    226.4,
    23.5,
    21.6,
    69.7,
    42.2,
    32.7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     73,     Ta
    69525,
    12100,
    11544,
    10207,
    2820,
    2575,
    2281,
    1872,
    1809,
    594.1,
    490.4,
    423.6,
    255.9,
    243.5,
    33.6,
    31.4,
    75.6,
    45.3,
    36.8,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     74,     W
    71676,
    12527,
    11959,
    10535,
    2932,
    2682,
    2367,
    1949,
    1883,
    625.4,
    518.7,
    446.8,
    273.9,
    260.5,
    42.9,
    40.5,
    83,
    45.6,
    34.6,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     75,     Re
    73871,
    12968,
    12385,
    10871,
    3049,
    2792,
    2457,
    2031,
    1960,
    658.2,
    549.1,
    470.7,
    293.1,
    278.5,
    53.4,
    50.7,
    84,
    58,
    44.5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     76,     Os
    76111,
    13419,
    12824,
    11215,
    3174,
    2909,
    2551,
    2116,
    2040,
    691.1,
    577.8,
    495.8,
    311.9,
    296.3,
    63.8,
    60.8,
    95.2,
    63,
    48,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     77,     Ir
    78395,
    13880,
    13273,
    11564,
    3296,
    3027,
    2645,
    2202,
    2122,
    725.4,
    609.1,
    519.4,
    331.6,
    314.6,
    74.5,
    71.2,
    101.7,
    65.3,
    51.7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     78,     Pt
    80725,
    14353,
    13734,
    11919,
    3425,
    3148,
    2743,
    2291,
    2206,
    762.1,
    642.7,
    546.3,
    353.2,
    335.1,
    87.6,
    84,
    107.2,
    74.2,
    57.2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     79,     Au
    83102,
    14839,
    14209,
    12284,
    3562,
    3279,
    2847,
    2385,
    2295,
    802.2,
    680.2,
    576.6,
    378.2,
    358.8,
    104,
    99.9,
    127,
    83.1,
    64.5,
    9.6,
    7.8,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     80,     Hg
    85530,
    15347,
    14698,
    12658,
    3704,
    3416,
    2957,
    2485,
    2389,
    846.2,
    720.5,
    609.5,
    405.7,
    385,
    122.2,
    117.8,
    136,
    94.6,
    73.5,
    14.7,
    12.5,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     81,     Tl
    88005,
    15861,
    15200,
    13035,
    3851,
    3554,
    3066,
    2586,
    2484,
    891.8,
    761.9,
    643.5,
    434.3,
    412.2,
    141.7,
    136.9,
    147,
    106.4,
    83.3,
    20.7,
    18.1,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     82,     Pb
    90526,
    16388,
    15711,
    13419,
    3999,
    3696,
    3177,
    2688,
    2580,
    939,
    805.2,
    678.8,
    464,
    440.1,
    162.3,
    157,
    159.3,
    119,
    92.6,
    26.9,
    23.8,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     83,     Bi
    93105,
    16939,
    16244,
    13814,
    4149,
    3854,
    3302,
    2798,
    2683,
    995,
    851,
    705,
    500,
    473,
    184,
    184,
    177,
    132,
    104,
    31,
    31,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     84,     Po
    95730,
    17493,
    16785,
    14214,
    4317,
    4008,
    3426,
    2909,
    2787,
    1042,
    886,
    740,
    533,
    507,
    210,
    210,
    195,
    148,
    115,
    40,
    40,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     85,     At
    98404,
    18049,
    17337,
    14619,
    4482,
    4159,
    3538,
    3022,
    2892,
    1097,
    929,
    768,
    567,
    541,
    238,
    238,
    214,
    164,
    127,
    48,
    48,
    0,
    0,
    26,
    0,
    0,
    0,
    0, //,     86,     Rn
    101137,
    18639,
    17907,
    15031,
    4652,
    4327,
    3663,
    3136,
    3000,
    1153,
    980,
    810,
    603,
    577,
    268,
    268,
    234,
    182,
    140,
    58,
    58,
    0,
    0,
    34,
    15,
    15,
    0,
    0, //,     87,     Fr
    103922,
    19237,
    18484,
    15444,
    4822,
    4490,
    3792,
    3248,
    3105,
    1208,
    1058,
    879,
    636,
    603,
    299,
    299,
    254,
    200,
    153,
    68,
    68,
    0,
    0,
    44,
    19,
    19,
    0,
    0, //,     88,     Ra
    106755,
    19840,
    19083,
    15871,
    5002,
    4656,
    3909,
    3370,
    3219,
    1269,
    1080,
    890,
    675,
    639,
    319,
    319,
    272,
    215,
    167,
    80,
    80,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     89,     Ac
    109651,
    20472,
    19693,
    16300,
    5182,
    4830,
    4046,
    3491,
    3332,
    1330,
    1168,
    966.4,
    712.1,
    675.2,
    342.4,
    333.1,
    290,
    229,
    182,
    92.5,
    85.4,
    0,
    0,
    41.4,
    24.5,
    16.6,
    0,
    0, //,     90,     Th
    112601,
    21105,
    20314,
    16733,
    5367,
    5001,
    4174,
    3611,
    3442,
    1387,
    1224,
    1007,
    743,
    708,
    371,
    360,
    310,
    232,
    232,
    94,
    94,
    0,
    0,
    0,
    0,
    0,
    0,
    0, //,     91,     Pa
    115606,
    21757,
    20948,
    17166,
    5548,
    5182,
    4303,
    3728,
    3552,
    1439,
    1271,
    1043,
    778.3,
    736.2,
    388.2,
    377.4,
    321,
    257,
    192,
    102.8,
    94.2,
    0,
    0,
    43.9,
    26.8,
    16.8,
    0,
    0, //,     92,     U
    118669.0,
    22427.0,
    21600.0,
    17610.0,
    5739.0,
    5366.0,
    4435.0,
    3849.0,
    3664.0,
    1501.0,
    1328.0,
    1085.0,
    816.0,
    771.0, //    Np 93
    414.0,
    403.0,
    338.0,
    274.0,
    206.0,
    109.0,
    101.0,
    0.0,
    0.0,
    47.0,
    29.0,
    18.0,
    0.0,
    0.0,
    121791.0,
    23104.0,
    22266.0,
    18057.0,
    5933.0,
    5547.0,
    4563.0,
    3970.0,
    3775.0,
    1559.0,
    1380.0,
    1123.0,
    846.0,
    798.0, //    Pu 94
    436.0,
    424.0,
    350.0,
    283.0,
    213.0,
    113.0,
    102.0,
    0.0,
    0.0,
    46.0,
    29.0,
    16.0,
    0.0,
    0.0,
    124982.0,
    23808.0,
    22952.0,
    18510.0,
    6133.0,
    5739.0,
    4698.0,
    4096.0,
    3890.0,
    1620.0,
    1438.0,
    1165.0,
    880.0,
    829.0, //    Am 95
    461.0,
    446.0,
    365.0,
    298.0,
    219.0,
    116.0,
    106.0,
    0.0,
    0.0,
    48.0,
    29.0,
    16.0,
    0.0,
    0.0,
    128241.0,
    24526.0,
    23651.0,
    18970.0,
    6337.0,
    5937.0,
    4838.0,
    4224.0,
    4009.0,
    1684.0,
    1498.0,
    1207.0,
    916.0,
    862.0, //    Cm 96
    484.0,
    470.0,
    383.0,
    313.0,
    229.0,
    124.0,
    110.0,
    0.0,
    0.0,
    50.0,
    30.0,
    16.0,
    0.0,
    0.0,
    131556.0,
    25256.0,
    24371.0,
    19435.0,
    6545.0,
    6138.0,
    4976.0,
    4353.0,
    4127.0,
    1748.0,
    1558.0,
    1249.0,
    955.0,
    898.0, //    Bk 97
    511.0,
    495.0,
    399.0,
    326.0,
    237.0,
    130.0,
    117.0,
    0.0,
    0.0,
    52.0,
    32.0,
    16.0,
    0.0,
    0.0,
    134939.0,
    26010.0,
    25108.0,
    19907.0,
    6761.0,
    6345.0,
    5116.0,
    4484.0,
    4247.0,
    1813.0,
    1620.0,
    1292.0,
    991.0,
    930.0, //    Cf 98
    538.0,
    520.0,
    416.0,
    341.0,
    245.0,
    137.0,
    122.0,
    0.0,
    0.0,
    54.0,
    33.0,
    17.0,
    0.0,
    0.0,
    138396.0,
    26782.0,
    25865.0,
    20384.0,
    6981.0,
    6558.0,
    5259.0,
    4617.0,
    4368.0,
    1883.0,
    1630.0,
    1336.0,
    1029.0,
    965.0, //    Es 99
    564.0,
    546.0,
    434.0,
    357.0,
    255.0,
    142.0,
    127.0,
    0.0,
    0.0,
    57.0,
    35.0,
    17.0,
    0.0,
    0.0,
    141926.0,
    27574.0,
    26641.0,
    20868.0,
    7208.0,
    6776.0,
    5405.0,
    4752.0,
    4491.0,
    1952.0,
    1749.0,
    1379.0,
    1067.0,
    1000.0, //    Fm 100
    591.0,
    572.0,
    452.0,
    373.0,
    262.0,
    149.0,
    133.0,
    0.0,
    0.0,
    59.0,
    36.0,
    17.0,
    0.0,
    0.0,
  ];

  constructor(
    public atomicNumber: number,
    edge: string
  ) {
    // Enum in PIQUANT is:
    // K1=0, L1, L2, L3, M1, M2...
    if (edge == "K1") {
      this.edgeIndex = 0;
    } else if (edge == "L3") {
      this.edgeIndex = 3;
    } else {
      throw Error("Unexpected edge for XrayEdge: " + edge);
    }
  }

  // return absorption edge jump ratio (also called edge step)
  jump(): number {
    // Again, taken from PIQUANT XrayEdge.cpp
    //  starts at Z=4.0000
    let J_K_DATA = [
      23.53, 21.7, 19.02, 17.44, 15.4, 13.84, 13.61, 11.84, 12.02, 10.95, 10.37, 9.969, 9.613, 9.309, 9.054, 9.163, 8.744, 8.551, 8.366, 8.242,
      8.045, 7.999, 7.893, 7.796, 7.707, 7.56, 7.543, 7.468, 7.392, 7.314, 7.225, 7.141, 7.058, 6.97, 6.888, 6.814, 6.749, 6.683, 6.539, 6.561,
      6.503, 6.444, 6.395, 6.334, 6.275, 6.229, 6.161, 6.13, 6.085, 6.039, 5.988, 5.949, 5.901, 5.863, 5.806, 5.763, 5.718, 5.674, 5.625, 5.582,
      5.537, 5.492, 5.45, 5.403, 5.353, 5.369, 5.27, 5.228, 5.185, 5.143, 5.099, 5.056, 5.007, 4.963, 4.973, 4.874, 4.828, 4.781, 4.731, 4.682,
      4.628, 4.586, 4.494, 4.481, 4.433, 4.381, 4.335, 4.287, 4.238, 4.191, 4.144, 4.095, 4.043, 3.998, 3.954,
    ];

    // starts at Z=15.000
    let J_L3_DATA = [
      6.19, 5.546, 4.646, 4.183, 10.98, 5.811, 5.007, 4.592, 4.073, 5.0, 3.306, 3.099, 2.773, 2.614, 3.135, 2.455, 2.959, 3.684, 4.156, 4.431,
      4.654, 4.678, 3.987, 3.982, 3.909, 3.836, 3.75, 3.674, 3.594, 3.518, 3.444, 3.328, 3.308, 3.254, 3.15, 3.006, 3.013, 2.978, 2.95, 2.92,
      2.955, 2.896, 2.868, 2.852, 2.815, 2.818, 2.801, 2.783, 2.766, 2.747, 2.732, 2.707, 2.706, 2.692, 2.678, 2.665, 2.649, 2.63, 2.613, 2.613,
      2.6, 2.587, 2.58, 2.563, 2.55, 2.534, 2.52, 2.506, 2.492, 2.478, 2.459, 2.449, 2.443, 2.433, 2.423, 2.411, 2.401, 2.392, 2.38, 2.37, 2.357,
      2.348, 2.346, 2.305,
    ];

    switch (this.edgeIndex) {
      case 0: // K1
        if (this.atomicNumber >= 4) {
          return J_K_DATA[this.atomicNumber - 4]; //    K - use tabular values
        }
        break;
      case 3: // L3
        if (this.atomicNumber >= 15 && this.atomicNumber <= 98) {
          return J_L3_DATA[this.atomicNumber - 15]; //    L3 - use tabular values
        }
        break;
      //default:
    }

    return 1.0;
  }

  energy(): number {
    return this.EDGE_ENERGIES[(this.atomicNumber - 1) * (this.MAXINDEX + 1) + this.edgeIndex];
  }

  fluorescenceYield(): number {
    // Again, taken from PIQUANT XrayEdge.cpp
    let DATA_wK = [
      0.0, 0, 0, 9e-5, 3.3e-5, 0.0007, 0.0014, 0.0031, 0.0058, 0.0092, 0.016, 0.021, 0.028, 0.036, 0.048, 0.061, 0.078, 0.097, 0.118, 0.14,
      0.163, 0.188, 0.214, 0.243, 0.273, 0.308, 0.34, 0.373, 0.406, 0.44, 0.474, 0.507, 0.535, 0.562, 0.589, 0.618, 0.643, 0.667, 0.69, 0.71,
      0.73, 0.747, 0.765, 0.78, 0.794, 0.808, 0.82, 0.831, 0.843, 0.853, 0.862, 0.87, 0.877, 0.884, 0.891, 0.897, 0.902, 0.907, 0.912, 0.917,
      0.921, 0.925, 0.929, 0.932, 0.935, 0.938, 0.941, 0.944, 0.947, 0.949, 0.951, 0.953, 0.955, 0.957, 0.958, 0.959, 0.961, 0.962, 0.963, 0.964,
      0.965, 0.966, 0.967, 0.968, 0.968, 0.969, 0.969, 0.97, 0.97, 0.971, 0.971, 0.972, 0.972, 0.973, 0.973, 0.974, 0.974, 0.975, 0.975, 0.975,
      0.976, 0.976, 0.976, 0.977, 0.977, 0.977, 0.978, 0.978, 0.978, 0.978, 0.979,
    ];

    let DATA_wL3 = [
      0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.2e-13, 0.00075, 0.00038, 3.1e-5, 0.00026, 0.00024, 0.00022, 0.00027, 0.00033, 0.00084, 0.0015,
      0.0026, 0.0037, 0.005, 0.0063, 0.0077, 0.0093, 0.011, 0.012, 0.013, 0.015, 0.016, 0.018, 0.02, 0.022, 0.024, 0.026, 0.028, 0.031, 0.034,
      0.037, 0.04, 0.043, 0.046, 0.049, 0.052, 0.056, 0.06, 0.064, 0.069, 0.074, 0.079, 0.085, 0.091, 0.097, 0.104, 0.111, 0.118, 0.125, 0.132,
      0.139, 0.147, 0.155, 0.164, 0.174, 0.182, 0.192, 0.201, 0.218, 0.22, 0.231, 0.243, 0.255, 0.268, 0.281, 0.294, 0.306, 0.32, 0.333, 0.347,
      0.36, 0.373, 0.386, 0.399, 0.411, 0.424, 0.437, 0.45, 0.463, 0.476, 0.489, 0.502, 0.514, 0.526, 0.539, 0.55, 0.56, 0.57, 0.579, 0.588,
      0.596, 0.604, 0.611, 0.618, 0.624, 0.63, 0.635, 0.64, 0.644,
    ];

    let DATA_wK_Bambynek = [
      0, 0, 0, 0.0002928, 0.0006929, 0.001409, 0.002575, 0.004349, 0.006909, 0.01045, 0.01519, 0.02133, 0.02911, 0.03872, 0.05037, 0.06422,
      0.08038, 0.09892, 0.1199, 0.1432, 0.1687, 0.1962, 0.2256, 0.2564, 0.2885, 0.3213, 0.3546, 0.388, 0.4212, 0.4538, 0.4857, 0.5166, 0.5464,
      0.5748, 0.6019, 0.6275, 0.6517, 0.6744, 0.6956, 0.7155, 0.734, 0.7512, 0.7672, 0.7821, 0.7958, 0.8086, 0.8204, 0.8313, 0.8415, 0.8508,
      0.8595, 0.8676, 0.875, 0.8819, 0.8883, 0.8942, 0.8997, 0.9049, 0.9096, 0.914, 0.9181, 0.922, 0.9255, 0.9289, 0.932, 0.9349, 0.9376, 0.9401,
      0.9425, 0.9447, 0.9467, 0.9487, 0.9505, 0.9522, 0.9538, 0.9553, 0.9567, 0.958, 0.9592, 0.9604, 0.9615, 0.9625, 0.9634, 0.9643, 0.9652,
      0.9659, 0.9667, 0.9674, 0.968, 0.9686, 0.9691, 0.9696, 0.9701, 0.9706, 0.971, 0.9713, 0.9717, 0.972, 0.9722, 0.9725, 0.9727,
    ];

    switch (this.edgeIndex) {
      case 0: // K1    K - Bambynek
        if (this.atomicNumber <= 100) {
          return DATA_wK_Bambynek[this.atomicNumber];
        } else if (this.atomicNumber <= 110) {
          return DATA_wK[this.atomicNumber];
        } else {
          return 0;
        }
        break;
      case 3: // L3
        return DATA_wL3[this.atomicNumber];

      //default:
    }

    return 0.0;
  }
}

class XrayLinesInfo {
  constructor(
    public edgeOccupied: XrayEdge,
    public lineIUPAC: string,
    public lineEnergy: number,
    public lineIntensity: number,
    public lineFactor: number
  ) {}
}

class XrayLines {
  private lines: XrayLinesInfo[] = [];

  constructor(newEdge: XrayEdge) {}

  lineCount(): number {
    return this.lines.length;
  }

  energyForLine(lineIdx: number): number {
    return this.lines[lineIdx].lineEnergy;
  }

  relativeForLine(lineIdx: number): number {
    return this.lines[lineIdx].lineIntensity;
  }
}

export function calcEscapeLines(energy: number, detectorActiveLayer: XrayMaterial): EscapeLine[] {
  let result: EscapeLine[] = [];

  for (let detAE of detectorActiveLayer.atomicNumbers) {
    let totAbs_incEnergy = detectorActiveLayer.cross_section(energy);

    // Check K lines
    let edgeK = new XrayEdge(detAE, "K1");
    let rk = edgeK.jump();
    if (energy < edgeK.energy()) {
      continue;
    }

    let linesK = new XrayLines(edgeK);
    for (let il = 0; il < linesK.lineCount(); il++) {
      let escEnergy = energy - linesK.energyForLine(il);

      //  calculate fraction for this escape peak
      let totAbs_escEnergy = detectorActiveLayer.cross_section(linesK.energyForLine(il));
      let absRatio = totAbs_escEnergy / totAbs_incEnergy;
      let x = 1.0 - absRatio * Math.log(1.0 + 1.0 / absRatio);
      let fraction = (detectorActiveLayer.fraction(detAE) * linesK.relativeForLine(il) * ((rk - 1) / rk) * edgeK.fluorescenceYield() * x) / 2.0;

      result.push(new EscapeLine(escEnergy, fraction));
    }

    // For silicon, check Ka3 and Ka4 lines
    if (detAE == 14) {
      //  Add K alpha 3 satellite line from silicon
      let energy_K_alpha3 = 1751.0;
      let relative_K_alpha3 = 0.057;
      //  calculate escape energy using line energy of escaped photon
      let escEnergy = energy - energy_K_alpha3;

      //  calculate fraction for this escape peak
      let totAbs_escEnergy = detectorActiveLayer.cross_section(energy_K_alpha3);
      let absRatio = totAbs_escEnergy / totAbs_incEnergy;
      let x = 1.0 - absRatio * Math.log(1.0 + 1.0 / absRatio);
      let fraction = (detectorActiveLayer.fraction(detAE) * relative_K_alpha3 * ((rk - 1) / rk) * edgeK.fluorescenceYield() * x) / 2.0; // NOTE: edgeK?

      result.push(new EscapeLine(escEnergy, fraction));

      //  Add K alpha 4 satellite line from silicon
      let energy_K_alpha4 = 1753.0;
      let relative_K_alpha4 = 0.03;
      //  calculate escape energy using line energy of escaped photon
      escEnergy = energy - energy_K_alpha4;

      //  calculate fraction for this escape peak
      totAbs_escEnergy = detectorActiveLayer.cross_section(energy_K_alpha4);
      absRatio = totAbs_escEnergy / totAbs_incEnergy;
      x = 1.0 - absRatio * Math.log(1.0 + 1.0 / absRatio);
      fraction = (detectorActiveLayer.fraction(detAE) * relative_K_alpha4 * ((rk - 1) / rk) * edgeK.fluorescenceYield() * x) / 2.0; // NOTE: edgeK?

      result.push(new EscapeLine(escEnergy, fraction));
    }

    // Check L3 lines
    let edgeL3 = new XrayEdge(detAE, "L3");
    // NOTE: MISSING! Doesn't this need an edgeL3.jump??
    //rk = edgeK.jump();
    if (energy < edgeL3.energy()) {
      continue;
    }

    let linesL3 = new XrayLines(edgeL3);
    for (let il = 0; il < linesL3.lineCount(); il++) {
      let escEnergy = energy - linesL3.energyForLine(il);

      //  calculate fraction for this escape peak
      let totAbs_escEnergy = detectorActiveLayer.cross_section(linesL3.energyForLine(il));
      let absRatio = totAbs_escEnergy / totAbs_incEnergy;
      let x = 1.0 - absRatio * Math.log(1.0 + 1.0 / absRatio);
      let fraction =
        (detectorActiveLayer.fraction(detAE) * linesL3.relativeForLine(il) * ((rk - 1) / rk) * edgeL3.fluorescenceYield() * x) / 2.0;

      result.push(new EscapeLine(escEnergy, fraction));
    }
  }

  let total_escape_fraction = 0;
  for (let escLine of result) {
    total_escape_fraction += escLine.fraction;
  }

  // TODO: original code also returns: 1 - total_escape_fraction;
  return result;
}
